# DATABASE CONFIGURATION
# The application uses a PostgreSQL database. You can obtain the database URL from your database provider.
DATABASE_URL=postgres://username:password@localhost:5432/your-database

# NEXTAUTH CONFIGURATION
# NextAuth is used for authentication in the application. You need to specify the URL where the Next.js application is running and a secret for session cookies.

NEXTAUTH_URL=http://localhost:3000

# You can generate a random secret using a tool like `uuidgen` or any other random string generator.
NEXTAUTH_SECRET=

# GOOGLE AUTHENTICATION CONFIGURATION
# The application supports authentication with Google. You need to create a project in the Google Developers Console, enable the Google Sign-In API, and create OAuth 2.0 credentials.
# More information: https://developers.google.com/identity/sign-in/web/sign-in
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# SUPABASE CONFIGURATION
# The application uses Supabase for real-time updates. You need to create a project in Supabase and obtain the URL and the anonymous key.
# More information: https://supabase.io/docs/guides/with-nextjs

# Example: https://yourproject.supabase.co
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=

# WEBSOCKET CONFIGURATION
# The application uses a WebSocket server for real-time communication. Specify the URL of the WebSocket server.
# Example: http://localhost:8080
NEXT_PUBLIC_SOCKET_URL=

# UPSTASH CONFIGURATION
# The application uses Upstash for rate limiting.
# You need to create an account on Upstash and obtain the Redis REST URL and Token.
# More information: https://upstash.com
UPSTASH_REDIS_REST_URL=
UPSTASH_REDIS_REST_TOKEN=
