generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oath_token         String? @db.Text
  oauth_token_secret String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

////////////////////////////////
// Twitter
////////////////////////////////

model User {
  id          String  @id @default(cuid())
  name        String
  screen_name String? @unique
  location    String?
  url         String?
  description String?
  protected   Boolean @default(false) //protected: your tweets and account information are only visible to people who follow you
  verified    Boolean @default(false)

  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  created_at    DateTime  @default(now())

  followers_count Int @default(0)
  friends_count   Int @default(0)
  favorites_count Int @default(0)
  statuses_count  Int @default(0)

  profile_banner_url String?
  profile_image_url  String?

  accounts Account[]
  sessions Session[]
  tweets   Tweet[]
  likes    Like[]

  followers Follows[]  @relation("following")
  following Follows[]  @relation("follower")
  retweets  Retweet[]
  bookmarks Bookmark[]
}

model Follows {
  follower     User     @relation("follower", fields: [follower_id], references: [id])
  follower_id  String
  following    User     @relation("following", fields: [following_id], references: [id])
  following_id String
  created_at   DateTime @default(now())

  @@id([follower_id, following_id])
}

model Tweet {
  id                      String     @id @default(cuid())
  text                    String?
  source                  String     @default("web")
  in_reply_to_status_id   String?
  in_reply_to_user_id     String?
  in_reply_to_screen_name String?
  is_quote_status         Boolean    @default(false)
  quoted_status_id        String?
  quote_count             Int        @default(0)
  reply_count             Int        @default(0)
  retweet_count           Int        @default(0)
  favorite_count          Int        @default(0)
  possibly_sensitive      Boolean    @default(false)
  lang                    String     @default("en")
  created_at              DateTime   @default(now())
  author                  User       @relation(fields: [userId], references: [id])
  userId                  String
  media                   Media[]
  likes                   Like[]
  retweets                Retweet[]
  quote                   Tweet?     @relation("quoted_tweet")
  quoted_tweet_id         String?    @unique
  quoted_tweet            Tweet?     @relation("quoted_tweet", fields: [quoted_tweet_id], references: [id])
  comments                Tweet[]    @relation("tweet-comment")
  comment_id              String?    @unique
  tweet_comments          Tweet?     @relation("tweet-comment", fields: [comment_id], references: [id])
  bookmarks               Bookmark[]
}

model Media {
  id         String @id @default(cuid())
  media_url  String
  media_type String
  tweet      Tweet  @relation(fields: [tweet_id], references: [id])
  tweet_id   String
}

model Like {
  id         String   @id @default(cuid())
  tweet      Tweet    @relation(fields: [tweet_id], references: [id])
  tweet_id   String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
}

model Retweet {
  id         String   @id @default(cuid())
  tweet      Tweet    @relation(fields: [tweet_id], references: [id])
  tweet_id   String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
}

model Bookmark {
  id         String   @id @default(cuid())
  tweet      Tweet    @relation(fields: [tweet_id], references: [id])
  tweet_id   String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
}
