generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// twitter user model
model User {
  id                    Int       @id @default(autoincrement())
  name                  String
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  role                  String    @default("user")
  screen_name           String?   @unique
  location              String?
  url                   String?
  description           String?
  protected             Boolean?
  verified              Boolean?
  followers_count       Int       @default(0)
  friends_count         Int       @default(0)
  favorites_count       Int       @default(0)
  statuses_count        Int       @default(0)
  profile_banner_url    String?
  profile_image_url     String?
  default_profile       Boolean   @default(false)
  default_profile_image Boolean   @default(false)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  tweets                Tweet[]
  accounts              Account[]
  sessions              Session[]
}

// twitter tweet model
model Tweet {
  id                      Int         @id @default(autoincrement())
  text                    String?
  image                   String?
  source                  String      @default("web")
  in_reply_to_status_id   Int?
  in_reply_to_user_id     Int?
  in_reply_to_screen_name String?
  quoted_status_id        Int?
  is_quote_status         Boolean     @default(false)
  quote_count             Int         @default(0)
  reply_count             Int         @default(0)
  retweet_count           Int         @default(0)
  favorite_count          Int         @default(0)
  possibly_sensitive      Boolean?    @default(false)
  lang                    String      @default("en")
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt
  images                  Image[]
  user_id                 Int
  author                  User        @relation(fields: [user_id], references: [id])
  coordinates_id          String?
  coordinates             Coordinate? @relation(fields: [coordinates_id], references: [id])
  place_id                String?
  place                   Place?      @relation(fields: [place_id], references: [id])
}

// twitter images model
model Image {
  id       String @id @default(uuid())
  url      String
  tweet    Tweet  @relation(fields: [tweet_id], references: [id])
  tweet_id Int
}

// twitter coordinates model
model Coordinate {
  id        String  @id @default(uuid())
  longitude Float
  latitude  Float
  tweets    Tweet[]
}

// twitter place model
model Place {
  id           String  @id @default(uuid())
  url          String?
  place_type   String?
  name         String?
  full_name    String?
  country_code String?
  country      String?
  tweets       Tweet[]
}
